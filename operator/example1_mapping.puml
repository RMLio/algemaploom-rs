@startuml
left to right direction
title "Mapping of data item to mapped item"
allowmixing

map "<b>Data Item" as  dataitem {
    id => 123
    name => Sitt Min Oo
    email => x.sittminoo@ugent.be
    email2 => sitt.minoo@imec.be
    interest => Nothing
}


component "Mapping Component"  {


    map ItemMappings {
    1 =>
    2 =>
    3 =>
    4 =>
    5 =>
    }


    map "<b>MapSpec 1" as MapSpec1 {
        map_attribute => foaf:name
        map_value => String(Reference("name"))
    }


    map "<b>MapSpec 2" as MapSpec2 {
        map_attribute => foaf:email
        map_value => Array([String(Reference("email")), String(Reference("email2"))])
    }



    map "<b> MapSpec 3" as MapSpec3 {
        map_attribute => "foaf:occupation"
        map_value => String(Constant("PhD Student"))
    }


    map "<b> MapSpec 4" as MapSpec4{
        map_attribute => "ex:interestDescription"
        map_value => String(Template("{name}'s interest is {interest}", ["name", "interest"]))

    }

    map "<b> MapSpec 5" as MapSpec5{
        map_attribute => "subject"
        map_value => Number(Reference("id"))
    }
    

    component Empty 


    Empty -l[hidden]-> MapSpec1

    hide Empty

    ItemMappings::1 --> MapSpec1
    ItemMappings::2 --> MapSpec2
    ItemMappings::3 --> MapSpec3
    ItemMappings::4 --> MapSpec4
    ItemMappings::5 --> MapSpec5


    portin mappingInput
    portout mappingOutput 

}

component Empty1


map "<b> Mapped Data Item" as MappedDataItem {
    subject => [ Number(123) ]
    foaf:name => [ String("Sitt Min Oo") ]
    foaf:email => [ Array([String("x.sittminoo@ugent.be"), String("sitt.minoo@imec.be")]) ]
    foaf:occupation => [ String("Phd Student") ]
    ex:interestDescription => [ String("Sitt Min Oo's interest is Nothing") ]
}

Empty1 <-- mappingOutput
Empty1 --> MappedDataItem 
hide Empty1


MappedDataItem -> mappingOutput


dataitem --> mappingInput


@enduml
